services:
  postgres:
    image: postgres:${POSTGRES_RELEASE}
    container_name: postgres
    env_file: .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - ./dataset:/var/lib/postgresql/data
    restart: on-failure
    healthcheck:
      test: pg_isready -U postgres

  main:
    build:
      context: .
      dockerfile: Dockerfile
    env_file: .env
    command: sh -c "python manage.py makemigrations && python manage.py migrate && python manage.py runserver 0.0.0.0:8000"
    ports:
      - "8000:8000"
    restart: on-failure
    depends_on:
      postgres:
        condition: service_healthy
services:
  postgres:
    image: postgres:${POSTGRES_RELEASE}
    container_name: postgres
    env_file: .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - ./dataset:/var/lib/postgresql/data
    deploy:
      restart_policy:
        max_attempts: 10
        window: 120s
    healthcheck:
      test: pg_isready -U postgres

  main:
    build:
      context: .
      dockerfile: Dockerfile
    env_file: .env
    command: sh -c "python manage.py makemigrations && python manage.py migrate && python manage.py runserver 0.0.0.0:8000"
    ports:
      - "8000:8000"
    deploy:
      replicas: 1 
      restart_policy:
        max_attempts: 10
        window: 120s
    depends_on: 
      postgres:
        condition: service_healthy
